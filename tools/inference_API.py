#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time : 19-07-25

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import cv2
import sys
# sys.path.append('/data/sunchao/Cascade/python2.7/site-packages')
reload(sys)
sys.setdefaultencoding('utf-8')

import numpy as np
from caffe2.python import workspace
import detectron.utils.c2 as c2_utils
from detectron.core.config import assert_and_infer_cfg
from detectron.core.config import merge_cfg_from_file
import detectron.core.test_engine as infer_engine
from detectron.core.config import get_cfg, merge_cfg_from_cfg, get_clean_cfg
# from detectron.utils.reload_anno import rewrite_xml

c2_utils.import_detectron_ops()
cv2.ocl.setUseOpenCL(False)

def convert_from_cls_format(cls_boxes, cls_segms, cls_keyps):
    """Convert from the class boxes/segms/keyps format generated by the testing code."""
    box_list = [b for b in cls_boxes if len(b) > 0]
    if len(box_list) > 0:
        boxes = np.concatenate(box_list)
    else:
        boxes = None
    if cls_segms is not None:
        segms = [s for slist in cls_segms for s in slist]
    else:
        segms = None
    if cls_keyps is not None:
        keyps = [k for klist in cls_keyps for k in klist]
    else:
        keyps = None
    classes = []
    for j in range(len(cls_boxes)):
        classes += [j] * len(cls_boxes[j])
    return boxes, segms, keyps, classes


class mycaffe2(object):

    def __init__(self, cfg_file, weights, gpu_id=0, TAG='SKUDET'):
        self.infer_engine = infer_engine

        self.gpu_id = gpu_id
        self.thresh = 0.5
        self.classs = '3477'

        # self.tag = TAG
        # config_factory(self.tag)
        self.clean_cfg = get_clean_cfg()
        merge_cfg_from_cfg(self.clean_cfg)

        merge_cfg_from_file(cfg_file)
        # cfg.tag = lll
        assert_and_infer_cfg(cache_urls=False, make_immutable=False)
        self.model = infer_engine.initialize_model_from_cfg(weights, gpu_id)
        self.cfg = get_cfg()

    def detect(self,img):
        im = cv2.imread(img)
        with c2_utils.NamedCudaScope(self.gpu_id):
            # cfg.tag = lll
            merge_cfg_from_cfg(self.cfg)
            cls_boxes, cls_segms, cls_keyps = self.infer_engine.im_detect_all(self.model, im, None)

        if isinstance(cls_boxes, list):
            boxes, segms, keypoints, classes = convert_from_cls_format(
                cls_boxes, cls_segms, cls_keyps)
        if (boxes is None or boxes.shape[0] == 0 or max(boxes[:, 4]) < self.thresh) and not False:
            return

        if boxes is None:
            sorted_inds = []  # avoid crash when 'boxes' is None
        else:
            # Display in largest to smallest order to reduce occlusion
            areas = (boxes[:, 2] - boxes[:, 0]) * (boxes[:, 3] - boxes[:, 1])
            sorted_inds = np.argsort(-areas)

        box_dict = []
        pic_struct = {}
        pic_struct['width'] = str(im.shape[1])
        pic_struct['height'] = str(im.shape[0])
        pic_struct['depth'] = str(im.shape[2])
        box_dict.append(pic_struct)
        for i in sorted_inds:
            obj_struct = {}
            obj_struct['bbox'] = boxes[i, :4]
            score = boxes[i, -1]
            if score < self.thresh:
                continue
            obj_struct['name'] = self.classs  # class： 3477
            obj_struct['score'] = score
            box_dict.append(obj_struct)

        return box_dict

if __name__ == '__main__':

    import time

    img = '/home/train/桌面/文档/黑人/testimg/0aeefa824658bd32318471f12d24b682.jpg'

    cfg_file = '/data/code/Detectron-Cascade-RCNN/OUTPUT_DIR/priceTagDet/priceTagDet_faster_rcnn_R50_FPN_2x_4g_ms_190410/priceTagDet_faster_rcnn_R50_FPN_2x_4g_ms_190410.yaml'
    weights = '/data/code/Detectron-Cascade-RCNN/OUTPUT_DIR/priceTagDet/priceTagDet_faster_rcnn_R50_FPN_2x_4g_ms_190410/model_final.pkl'
    de = mycaffe2(cfg_file, weights, gpu_id=1, TAG='12')

    cfg_file2 = '/data/code/Detectron-Cascade-RCNN/OUTPUT_DIR/skuDethj/skuDet_cascade_X101-64x4d_FPN_2x_ms_190424/skuDet_cascade_X101-64x4d_FPN_2x_ms_190424.yaml'
    weights2 = '/data/code/Detectron-Cascade-RCNN/OUTPUT_DIR/skuDethj/skuDet_cascade_X101-64x4d_FPN_2x_ms_190424/model_final.pkl'
    de2 = mycaffe2(cfg_file2, weights2, gpu_id=0, TAG='122')

    det_price_bbox2 = de.detect(img)
    det_sku_bbox = de2.detect(img)

    out_pricetag_xml = '/home/train/桌面/文档/黑人/testimg/价格牌/Annotations/0aeefa824658bd32318471f12d24b682.xml'
    out_sku_xml = '/home/train/桌面/文档/黑人/testimg/sku/Annotations/0aeefa824658bd32318471f12d24b682.xml'

    img_name = '0aeefa824658bd32318471f12d24b682.jpg'
    # rewrite_xml(det_price_bbox2,img_name,out_pricetag_xml)
    # rewrite_xml(det_sku_bbox, img_name, out_sku_xml)

    # for i in range(100):
    #     start_time = time.time()
    #     det_bbox = de.detect(img)
    #     end_time = time.time()
    #     print("inference time :{}".format(end_time-start_time))
    #
    #     start_time2 = time.time()
    #     det_bbox2 = de2.detect(img)
    #     end_time2 = time.time()
    #     print("inference time :{}".format(end_time2-start_time2))

